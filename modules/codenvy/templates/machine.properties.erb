# ###################################
# This file is managed by puppet
# PLEASE DON'T MODIFY BY HAND
# ###################################

machine.project.location=/opt/codenvy-data/che-machines
machine.logs.location=/opt/codenvy-data/che-machines-logs

# docker registry for snapshots
machine.docker.registry=<%= scope.lookupvar('codenvy::host_url') %>:5000
# namespace for snapshots
machine.docker.snapshot.registry_namespace=NULL
machine.docker.unused_containers_cleanup_period_min=60

# swarm
docker.client.daemon_url=http://codenvy-swarm:2375
swarm.client.node_description_length=9

# terminal
machine.server.terminal.path_to_archive.linux_amd64=/home/codenvy-user/Downloads/terminal

# ws agent
machine.server.ext.archive=/home/codenvy-user/Downloads/ws-agent.tar.gz
machine.ws_agent.run_command=<%= scope.lookupvar('codenvy::machine_ws_agent_run_command') %>
machine.ws_agent.max_start_time_ms=<%= scope.lookupvar('codenvy::machine_ws_agent_max_start_time_ms') %>
machine.ws_agent.ping_delay_ms=2000
machine.ws_agent.ping_conn_timeout_ms=2000
machine.ws_agent.ping_timed_out_error_msg=Timeout reached. Codenvy is unable to verify that your workspace's agent has successfully booted. Either the workspace is unreachable, the agent had an error during startup, or your workspace is starting slowly. Admins can configure machine_ws_agent_max_start_time_ms to increase the timeout.
machine.ws_agent.agent_api.path=/wsagent/ext/
machine.ws_agent.inactive_stop_timeout_ms=<%= scope.lookupvar('codenvy::machine_ws_agent_inactive_stop_timeout_ms') %>

# When Che start an agent, it performs check if it is launched.
machine.agent.max_start_time_ms=120000
machine.agent.ping_delay_ms=2000

router.nats.url=nats://localhost:4222
machine.router.routing_pattern=%4$s-%1$s.machines.<%= scope.lookupvar('codenvy::host_url') %>

# backup
machine.backup.backup_script=/opt/codenvy-data/conf/rsyncbackup.sh
machine.backup.restore_script=/opt/codenvy-data/conf/rsyncrestore.sh
machine.backup.backup_duration_second=300
machine.backup.restore_duration_second=300
machine.backup.backup_period_second=360

# machine default memory allocation
machine.default_mem_size_mb=<%= scope.lookupvar('codenvy::machine_default_mem_size_mb') %>

# path to machine predefined recipes
local.recipe.path=

# extra hosts which will be used in machines
machine.docker.machine_extra_hosts=<%= scope.lookupvar('codenvy::machine_extra_hosts') %>
docker.connection.tcp.connection_timeout_ms=600000
docker.connection.tcp.read_timeout_ms=600000
machine.docker.pull_image=true
docker.api.version=1.20

# https support
machine.proxy_wsagent_server_url_template=<%= scope.lookupvar('codenvy::host_protocol') %>://<%= scope.lookupvar('codenvy::host_url') %>/%3$s_%2$s/%4$s
machine.proxy_terminal_server_url_template=<%= scope.lookupvar('codenvy::host_protocol') %>://<%= scope.lookupvar('codenvy::host_url') %>/%3$s_%2$s/%4$s


# If true, then all docker machines will start in privilege mode.
machine.docker.privilege_mode=<%= scope.lookupvar('codenvy::machine_docker_privilege_mode') %>

machine.docker.server.terminal.run_command=mkdir -p ~/che && cp /mnt/che/terminal -R ~/che && ~/che/terminal/che-websocket-terminal -addr :4411 -cmd /bin/bash -static ~/che/terminal/ -path '/[^/]+'

# Allows to use registry for machine docker snapshots, you should set this property to {true},
# otherwise workspace snapshots would be saved locally.
machine.docker.snapshot_use_registry=true

# Allows to adjust machine swap memory by multiplication current machnine memory on provided value.
# default is 0 which means disabled swap, if set multiplier value equal to 0.5 machine swap will be
# configured with size that equal to half of current machine memory.
machine.docker.memory_swap_multiplier=<%= scope.lookupvar('codenvy::machine_docker_memory_swap_multiplier') %>

# java opts for dev machine
che.machine.java_opts=-Xms256m -Xmx2048m -Djava.security.egd=file:/dev/./urandom <% if ! @http_proxy_for_codenvy.empty? or ! @https_proxy_for_codenvy.empty? -%>-Dhttp.proxySet=true<% end -%><% if ! @http_proxy_for_codenvy.empty? -%><% if ! @http_proxy_for_codenvy.empty? and @http_proxy_for_codenvy.include? '@' -%> -Dhttp.proxyUser=<%= @http_proxy_for_codenvy.gsub(/^https?\:\/\//, '').gsub(/^www./,'').split('@')[0].split(':')[0] %> -Dhttp.proxyPassword=<%= @http_proxy_for_codenvy.gsub(/^https?\:\/\//, '').gsub(/^www./,'').split('@')[0].split(':')[1] %> -Dhttp.proxyHost=<%= @http_proxy_for_codenvy.gsub(/^https?\:\/\//, '').gsub(/^www./,'').split('@')[1].split(':')[0] %> -Dhttp.proxyPort=<%= @http_proxy_for_codenvy.gsub(/^https?\:\/\//, '').gsub(/^www./,'').split('@')[1].split(':')[1] %><% else -%> -Dhttp.proxyHost=<%= @http_proxy_for_codenvy.gsub(/^https?\:\/\//, '').gsub(/^www./,'').split(':')[0] %> -Dhttp.proxyPort=<%= @http_proxy_for_codenvy.gsub(/^https?\:\/\//, '').gsub(/^www./,'').split(':')[1] %><% end -%><% end -%><% if ! @https_proxy_for_codenvy.empty? -%><% if @https_proxy_for_codenvy.include? '@' -%> -Dhttps.proxyUser=<%= @https_proxy_for_codenvy.gsub(/^https?\:\/\//, '').gsub(/^www./,'').split('@')[0].split(':')[0] %> -Dhttps.proxyPassword=<%= @https_proxy_for_codenvy.gsub(/^https?\:\/\//, '').gsub(/^www./,'').split('@')[0].split(':')[1] %> -Dhttps.proxyHost=<%= @https_proxy_for_codenvy.gsub(/^https?\:\/\//, '').gsub(/^www./,'').split('@')[1].split(':')[0] %> -Dhttps.proxyPort=<%= @https_proxy_for_codenvy.gsub(/^https?\:\/\//, '').gsub(/^www./,'').split('@')[1].split(':')[1] %><% else -%> -Dhttps.proxyHost=<%= @https_proxy_for_codenvy.gsub(/^https?\:\/\//, '').gsub(/^www./,'').split(':')[0] %> -Dhttps.proxyPort=<%= @https_proxy_for_codenvy.gsub(/^https?\:\/\//, '').gsub(/^www./,'').split(':')[1] %><% end -%><% end -%><% if ! @no_proxy_for_codenvy.empty? -%> -Dhttp.nonProxyHosts='<%= @no_proxy_for_codenvy.gsub(/^https?\:\/\//, '').gsub(/^www./,'').gsub(',','|') %>'<% end -%>

# extra volumes to mount, semicolon separated.
machine.server.extra.volume=<%= scope.lookupvar('codenvy::machine_server_extra_volume') %>

# public key for rsync
workspace.backup.public_key_path=/opt/codenvy-data/conf/ssh/key.pem.pub
